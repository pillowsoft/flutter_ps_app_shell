import 'package:flutter/material.dart';
import 'package:forui/forui.dart';
import 'adaptive_widget_factory.dart';

/// Forui implementation of the adaptive widget factory
class ForuiWidgetFactory extends AdaptiveWidgetFactory {
  @override
  Widget scaffold({
    Key? key,
    Widget? appBar,
    required Widget body,
    Widget? bottomNavBar,
    Color? backgroundColor,
  }) {
    return Scaffold(
      key: key,
      appBar: appBar as PreferredSizeWidget?,
      body: body,
      bottomNavigationBar: bottomNavBar,
      backgroundColor: backgroundColor,
    );
  }

  @override
  Widget appBar({
    Key? key,
    required Widget title,
    List<Widget>? actions,
    Widget? leading,
    bool automaticallyImplyLeading = true,
  }) {
    return AppBar(
      key: key,
      title: title,
      actions: actions,
      leading: leading,
      automaticallyImplyLeading: automaticallyImplyLeading,
      backgroundColor: Colors.transparent,
      elevation: 0,
    );
  }

  @override
  Widget navBar({
    Key? key,
    required int currentIndex,
    required Function(int) onTap,
    required List<AdaptiveNavItem> items,
  }) {
    return BottomNavigationBar(
      key: key,
      currentIndex: currentIndex,
      onTap: onTap,
      items: items.map((item) => BottomNavigationBarItem(
        icon: Icon(item.icon),
        activeIcon: item.activeIcon != null ? Icon(item.activeIcon) : null,
        label: item.label,
      )).toList(),
      selectedItemColor: Colors.blue,
      unselectedItemColor: Colors.grey,
    );
  }

  @override
  Widget listTile({
    Key? key,
    required Widget title,
    Widget? subtitle,
    Widget? leading,
    Widget? trailing,
    VoidCallback? onTap,
  }) {
    return ListTile(
      key: key,
      title: title,
      subtitle: subtitle,
      leading: leading,
      trailing: trailing,
      onTap: onTap,
    );
  }

  @override
  Widget switch_({
    Key? key,
    required bool value,
    required Function(bool) onChanged,
    Color? activeColor,
  }) {
    return Switch(
      key: key,
      value: value,
      onChanged: onChanged,
      activeColor: activeColor ?? Colors.black,
      activeTrackColor: activeColor?.withValues(alpha: 0.5) ?? Colors.grey,
    );
  }

  @override
  Widget button({
    Key? key,
    required String label,
    required VoidCallback onPressed,
    ButtonStyle? style,
  }) {
    return ElevatedButton(
      key: key,
      onPressed: onPressed,
      style: ElevatedButton.styleFrom(
        backgroundColor: Colors.black,
        foregroundColor: Colors.white,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8),
        ),
      ),
      child: Text(label),
    );
  }

  @override
  Widget iconButton({
    Key? key,
    required Icon icon,
    required VoidCallback onPressed,
    String? tooltip,
  }) {
    return IconButton(
      key: key,
      onPressed: onPressed,
      icon: icon,
      tooltip: tooltip,
    );
  }

  @override
  Widget textButton({
    Key? key,
    required String label,
    required VoidCallback onPressed,
  }) {
    return TextButton(
      key: key,
      onPressed: onPressed,
      child: Text(label),
    );
  }

  @override
  Future<T?> showDialog<T>({
    required BuildContext context,
    required Widget title,
    required Widget content,
    List<Widget>? actions,
    bool barrierDismissible = true,
  }) {
    return showAdaptiveDialog<T>(
      context: context,
      barrierDismissible: barrierDismissible,
      builder: (context) => FDialog(
        title: title,
        body: content,
        actions: actions ?? [],
      ),
    );
  }

  @override
  Future<T?> showModalBottomSheet<T>({
    required BuildContext context,
    required WidgetBuilder builder,
    bool isScrollControlled = false,
  }) {
    return showModalBottomSheet<T>(
      context: context,
      builder: builder,
      isScrollControlled: isScrollControlled,
    );
  }

  @override
  Widget listSection({
    Key? key,
    Widget? header,
    required List<Widget> children,
    Widget? footer,
  }) {
    return Card(
      key: key,
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          if (header != null)
            Padding(
              padding: const EdgeInsets.all(16),
              child: DefaultTextStyle(
                style: const TextStyle(
                  fontSize: 14,
                  fontWeight: FontWeight.w600,
                ),
                child: header,
              ),
            ),
          ...children,
          if (footer != null)
            Padding(
              padding: const EdgeInsets.all(16),
              child: footer,
            ),
        ],
      ),
    );
  }

  @override
  Widget themedApp({
    required Widget home,
    ThemeMode? themeMode,
    String? title,
  }) {
    return MaterialApp(
      title: title ?? 'Flutter App',
      theme: ThemeData.light(),
      darkTheme: ThemeData.dark(),
      themeMode: themeMode ?? ThemeMode.system,
      builder: (context, child) {
        final isDark = Theme.of(context).brightness == Brightness.dark;
        return FTheme(
          data: isDark ? FThemes.zinc.dark : FThemes.zinc.light,
          child: child!,
        );
      },
      home: home,
    );
  }
  
  @override
  IconData getIcon(String semanticName) {
    // Forui doesn't have its own icons, so we use Material icons
    switch (semanticName) {
      case 'folder':
        return Icons.folder_outlined;
      case 'folder_filled':
        return Icons.folder;
      case 'settings':
        return Icons.settings_outlined;
      case 'settings_filled':
        return Icons.settings;
      case 'add':
        return Icons.add;
      case 'chevron_right':
        return Icons.chevron_right;
      case 'camera':
        return Icons.camera_alt;
      case 'video':
        return Icons.videocam;
      default:
        return Icons.help_outline;
    }
  }
}